#!/usr/bin/env sh

set -e

# shellcheck source=/dev/null
. "$(dirname "$0")"/../../utils.sh

if [ "$(id -u)" -eq 0 ]; then
  log_error "This script cannot be run as root. It will call sudo as needed"
  exit 1
fi

log_info "Setup Gnome"
(set -x; gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer', 'variable-refresh-rate', 'xwayland-native-scaling']")
(set -x; gsettings set org.gnome.Epiphany.web:/ hardware-acceleration-policy 'always' || true)

if ! systemctl is-enabled bluetooth > /dev/null 2>&1; then
  log_info "Enable bluetooth service"
  (set -x; systemctl enable --now bluetooth)
fi

log_info "Refresh repos"
(set -x; sudo pacman -Syyuu)

log_info "Setup legacy gtk theme"
log_warning "Set the theme using gnome-tweaks"
(set -x; sudo pacman -S --needed --noconfirm adw-gtk-theme)

# Install https://github.com/mukul29/legacy-theme-auto-switcher-gnome-extension manually
log_info "Setup gnome extensions"
log_warning "\`legacy-theme-auto-switcher-gnome-extension\` must be setup manually"
(set -x; sudo pacman -S --needed --noconfirm gnome-shell-extension-caffeine gnome-shell-extension-appindicator)

log_info "Setup graphics packages"
(set -x; sudo pacman -S --needed --noconfirm intel-media-driver vulkan-intel libvpl vpl-gpu-rt)
(set -x; sudo pacman -S --needed --noconfirm nvidia-open nvidia-utils)
(set -x; sudo pacman -S --needed --noconfirm libva-utils vdpauinfo vulkan-tools intel-gpu-tools nvtop)
(set -x; sudo pacman -S --needed --noconfirm gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly gst-plugin-va)

log_info "Setup firewall"
(set -x; sudo pacman -S --needed --noconfirm gufw)

if ! systemctl is-enabled ufw > /dev/null 2>&1; then
  log_info "Enable firewall service"
  (set -x; systemctl enable --now ufw)
fi

if sudo ufw status | grep -q "inactive"; then
  log_info "Enable ufw"
  (set -x; sudo ufw enable)
fi

log_info "Add localsend to firewall exclusion"
sudo ufw allow 53317/udp
sudo ufw allow 53317/tcp

log_info "Add syncthing to firewall exclusion"
sudo ufw allow 22000/udp
sudo ufw allow 21027/udp

log_info "Setup flatpak"
(set -x; sudo pacman -S --needed --noconfirm flatpak)
(set -x; sudo pacman -S --needed --noconfirm gnome-software)

log_info "Setup flatpak remotes"
(set -x; flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo)
(set -x; flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo)

log_info "Install flatpack apps and runtimes"
if [ -z "$FLATPAK_APPS" ]; then
  log_warning "No flatpak apps to install"
else
  log_info "Install flatpak apps"
  echo "$FLATPAK_APPS" | while read -r origin app; do
    (set -x; flatpak install --user -y --noninteractive "$origin" "$app")
  done
fi

if [ -z "$FLATPAK_RUNTIMES" ]; then
  log_warning "No flatpak runtimes to install"
else
  log_info "Install flatpak runtimes"
  echo "$FLATPAK_RUNTIMES" | while read -r origin runtime; do
    (set -x; flatpak install --user -y --noninteractive "$origin" "$runtime")
  done
fi

log_info "Setup vscode"
(set -x; sudo pacman -S --needed --noconfirm code trash-cli)

if [ -z "$VSCODE_EXTENSIONS" ]; then
  log_warning "No vscode extensions to install"
else
  log_info "Setup vscode extensions"
  echo "$VSCODE_EXTENSIONS" | while read -r extension; do
    (set -x; code --install-extension "$extension")
  done
fi

log_info "Setup firefox"
(set -x; sudo pacman -S --needed --noconfirm firefox)

if [ ! -f "/etc/firefox/policies/policies.json" ]; then
  (set -x; sudo mkdir -p /etc/firefox/policies)
  (set -x; sudo touch /etc/firefox/policies/policies.json)
  (set -x; sudo cat "$DOTFILES_DIR/os/arch/firefox/policies.json" | sudo tee /etc/firefox/policies/policies.json > /dev/null)
fi

log_info "Setup bitwarden"
(set -x; sudo pacman -S --needed --noconfirm bitwarden bitwarden-cli)

log_info "Setup ghostty"
(set -x; sudo pacman -S --needed --noconfirm ghostty)

log_info "Setup mpv"
(set -x; sudo pacman -S --needed --noconfirm mpv)

log_info "Setup nix"

if ! command -v nix > /dev/null 2>&1; then
  (set -x; curl -L https://nixos.org/nix/install | sh -s -- --no-daemon --yes --no-modify-profile --no-channel-add)

  # shellcheck source=/dev/null
  . "$HOME"/.nix-profile/etc/profile.d/nix.sh

  nix_binary_path="$(readlink -f "$(which nix)")"
  nix_profile_index="$(nix --extra-experimental-features 'nix-command flakes' profile list | grep "$(echo "$nix_binary_path" | sed 's|^/nix/store/\([^/]*\)/.*$|\1|g')" | awk '{print $3}')"
  (set -x; nix --extra-experimental-features 'nix-command flakes' profile remove "$nix_profile_index")
  (set -x; "$nix_binary_path" --extra-experimental-features 'nix-command flakes' profile install nixpkgs#nix)
fi

if [ -z "$NIX_PACKAGES" ]; then
  log_warning "No nix packages to install"
else
  log_info "Setup nix packages"
  echo "$NIX_PACKAGES" | while read -r package; do
    case "$package" in
      *podman*|*syncthing*)
        log_warning "Service \"$package\" need to be manually enabled after restarting the computer"
        ;;
    esac

    (set -x; nix --extra-experimental-features 'nix-command flakes' profile install nixpkgs#"$package")
  done
fi

log_info "Stow files"
(set -x; cd "$DOTFILES_DIR" && stow --adopt --no-folding -v home)
(set -x; cd "$DOTFILES_DIR" && git restore home)

if ! systemctl --user is-enabled dump-packages.timer > /dev/null 2>&1; then
  log_info "Enable dump package cron"
  (set -x; systemctl --user enable --now dump-packages.timer)
fi

log_info "Setup ubi"
(set -x; curl --silent --location https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh | TARGET="$HOME/.local/bin" sh)

if [ -z "$UBI_PACKAGES" ]; then
  log_warning "No ubi packages to install"
else
  log_info "Setup ubi packages"
  echo "$UBI_PACKAGES" | while read -r package; do
    # shellcheck disable=SC2086
    (set -x; "$HOME"/.local/bin/ubi $package --in "$HOME"/.local/bin -v)
  done
fi

log_success "All done, restart your computer."
