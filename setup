#!/usr/bin/env sh

if [ "$(id -u)" -eq 0 ]; then
  echo "This script cannot be run as root. It will call sudo as needed"
  exit 1
fi

set -e

trap "cleanup" EXIT

###
# UTILS & VARS
###

BOLD="\033[0;1m"
CYAN="\033[0;36m"
GREEN="\033[0;32m"
RED="\033[0;31m"
BOLD_GREEN="\033[1;32m"
PURPLE="\033[0;35m"
RESET="\033[0m"

DIR_NAME="$(realpath "$(dirname "$0")")"
PACKAGES_DIR="$DIR_NAME/packages"
TEMP_DIR="$(mktemp --directory)"
PIDS=""

cleanup() {
  for job in $PIDS; do
    __run_and_print "kill $job &> /dev/null" || true
  done

  __run_and_print "rm -rf $TEMP_DIR &> /dev/null" || true
}

__run_and_print() {
  printf "%b+%b %s\n" "$PURPLE" "$RESET" "$*"

  eval $*
}

run_and_print() {
  printf "%b+%b %s\n" "$PURPLE" "$RESET" "$*"

  stdout="$(mktemp --tmpdir="$TEMP_DIR")"
  stderr="$(mktemp --tmpdir="$TEMP_DIR")"

  eval $* > "$stdout" 2> "$stderr" &
  pid="$!"
  PIDS="$PIDS $pid"
  
  tail -f -n +1 "$stdout" | sed "s/^/  $(printf "%b>%b" "$CYAN" "$RESET") /" &
  tail1_pid="$!"
  PIDS="$PIDS $tail1_pid"
  
  tail -f -n +1 "$stderr" | sed "s/^/  $(printf "%b!%b" "$RED" "$RESET") /" &
  tail2_pid="$!"
  PIDS="$PIDS $tail2_pid"

  wait "$pid"

  kill "$tail1_pid"
  kill "$tail2_pid"
  wait
}

print_title() {
  printf "%b==>%b %b%s%b\n" "$BOLD_GREEN" "$RESET" "$BOLD" "$1" "$RESET"
}

print_sub_title() {
  printf "%b=>%b %s\n" "$GREEN" "$RESET" "$1"
}

###
# STEPS
###

install_nix_step() {
  if ! command -v nix > /dev/null 2>&1; then
    run_and_print "curl -L https://nixos.org/nix/install | sh -s -- --no-daemon --yes --no-modify-profile"
    
    . $HOME/.nix-profile/etc/profile.d/nix.sh

    run_and_print nix-channel --add https://github.com/nix-community/nixGL/archive/main.tar.gz nixgl
    run_and_print nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
    run_and_print nix-channel --update
    run_and_print nix-channel --list
  else
    print_sub_title "nix already installed"
  fi

  if ! command -v home-manager > /dev/null 2>&1; then
    run_and_print nix-shell "'<home-manager>'" -A install
  else
    print_sub_title "home-manager already installed"
  fi

  run_and_print mkdir -p "$HOME"/.config/home-manager

  if [ -f "$HOME"/.config/home-manager/home.nix ]; then 
    run_and_print rm "$HOME"/.config/home-manager/home.nix
  fi
  
  run_and_print ln -s "$HOME"/.dotfiles/nix/home.nix "$HOME"/.config/home-manager/home.nix

  nix-env --install --file '<nixpkgs>' --attr nix cacert -I nixpkgs=channel:nixpkgs-unstable
  run_and_print home-manager switch -b backup
  run_and_print nix-collect-garbage -d
}

install_eget_packages_step() {
  if [ -n "$(cat "$PACKAGES_DIR/eget-executables")" ]; then
    while IFS= read -r executable; do
      if [ -n "$executable" ]; then
        run_and_print eget $executable --upgrade-only
        echo
      fi
    done < "$PACKAGES_DIR/eget-executables"
  else
    print_sub_title "No eget packages to install, skipping"
  fi
}

install_flatpak_apps_and_runtimes_step() {
  if command -v flatpak > /dev/null 2>&1; then
    if [ -n "$(cat "$PACKAGES_DIR/flatpak-apps")" ]; then
      run_and_print flatpak install -y --noninteractive $(cat "$PACKAGES_DIR/flatpak-apps")
      echo
    else
      print_sub_title "No flatpak apps to install, skipping"
    fi

    if [ -n "$(cat "$PACKAGES_DIR/flatpak-runtimes")" ]; then
      run_and_print flatpak install -y --noninteractive $(cat "$PACKAGES_DIR/flatpak-runtimes")
    else
      print_sub_title "No flatpak runtimes to install, skipping"
    fi
  else
    print_sub_title "Flatpak is not installed, skipping"
  fi
}

###
# MAIN
###

print_title "Install nix"
install_nix_step
echo

print_title "Install eget packages"
install_eget_packages_step
echo

print_title "Install flatpak apps and runtimes"
install_flatpak_apps_and_runtimes_step
echo

printf "%bâœ“%b All done, restart and open a new shell to get started !!!\n" "$GREEN" "$RESET"
