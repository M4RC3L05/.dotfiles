#!/usr/bin/env sh

set -e

###
# UTILS & VARS
###

GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[0;33m"
PURPLE="\033[0;35m"
RED="\033[0;31m"
RESET="\033[0m"

DIR_NAME="$(realpath "$(dirname "$0")")"
PACKAGES_DIR="$DIR_NAME/packages"
FLATPAK_APPS="$(cat "$PACKAGES_DIR"/flatpak-apps)"
FLATPAK_RUNTIMES="$(cat "$PACKAGES_DIR"/flatpak-runtimes)"

PS4="$PURPLE\$ $RESET"

log() {
  case "$1" in
    INFO)
      printf "%b[%s]%b %s\n" "$BLUE" "INFO" "$RESET" "$2"
    ;;
    WARNING)
      printf "%b[%s]%b %s\n" "$YELLOW" "WARNING" "$RESET" "$2"
    ;;
    SUCCESS)
      printf "%b[%s]%b %s\n" "$GREEN" "SUCCESS" "$RESET" "$2"
    ;;
    ERROR)
      printf "%b[%s]%b %s\n" "$RED" "ERROR" "$RESET" "$2"
    ;;
  esac
}

log_info() {
  log "INFO" "$1"
}

log_success() {
  log "SUCCESS" "$1"
}

log_warning() {
  log "WARNING" "$1"
}

log_error() {
  log "ERROR" "$1"
}

###
# STEPS
###

install_and_setup_nix() {
  if command -v nix > /dev/null 2>&1; then
    log_warning "Nix already installed, skipping installation"

    return
  fi

  log_info "Install nix"

  (set -x; curl -L https://nixos.org/nix/install | sh -s -- --no-daemon --yes --no-modify-profile --no-channel-add)

  # shellcheck disable=SC1091
  . "$HOME"/.nix-profile/etc/profile.d/nix.sh

  log_info "Add extra nix channels"

  (set -x; nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs)
  (set -x; nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager)
  (set -x; nix-channel --add https://github.com/nix-community/nixGL/archive/main.tar.gz nixgl)
  (set -x; nix-channel --update)
  (set -x; nix-channel --list)
}

install_and_setup_home_manager() {
  if command -v home-manager > /dev/null 2>&1; then
    log_warning "Home-manager already installed, skipping installation"

    return
  fi

  log_info "Install home manager"

  (set -x; nix-shell '<home-manager>' -A install)

  log_info "Set up home manager files"

  (set -x; mkdir -p "$HOME"/.config/home-manager)

  if [ -f "$HOME"/.config/home-manager/home.nix ]; then
    (set -x; rm "$HOME"/.config/home-manager/home.nix)
  fi

  (set -x; ln -s "$HOME"/.dotfiles/nix/home.nix "$HOME"/.config/home-manager/home.nix)
}

install_home_manager_derivation() {
  log_info "Install home manager packages"

  (set -x; home-manager switch -b backup)
}

install_flatpak_apps_and_runtimes_step() {
  if ! command -v flatpak > /dev/null 2>&1; then
    log_warning "Flatpak is not installed, skipping"

    return
  fi

  log_info "Adding flatpak remotes"
  (set -x; flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo)
  (set -x; flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo)

  if [ -z "$FLATPAK_APPS" ]; then
    log_warning "No flatpak apps to install, skipping instalation"
  else
    log_info "Install flatpak apps"
    echo "$FLATPAK_APPS" | while read -r origin app; do
      # shellcheck disable=SC2086
      (set -x; flatpak install --user -y --noninteractive $origin $app)
    done
  fi

  if [ -z "$FLATPAK_RUNTIMES" ]; then
    log_warning "No flatpak runtimes to install, skipping instalation"
  else
    log_info "Install flatpak runtimes"
    echo "$FLATPAK_RUNTIMES" | while read -r origin runtime; do
      # shellcheck disable=SC2086
      (set -x; flatpak install --user -y --noninteractive $origin $runtime)
    done
  fi
}

###
# MAIN
###

if [ "$(id -u)" -eq 0 ]; then
  log_error "This script cannot be run as root. It will call sudo as needed"
  exit 1
fi

install_and_setup_nix
install_and_setup_home_manager
install_home_manager_derivation
install_flatpak_apps_and_runtimes_step

log_success "All done, restart and open a new shell to get started !!!"
